// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Online_learning_platform.Data;

#nullable disable

namespace Online_learning_platform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023174026_Initial_Create")]
    partial class Initial_Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Online_learning_platform.Models.Categories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Img = "download (2).jpeg",
                            Name = "Backend"
                        },
                        new
                        {
                            ID = 2,
                            Img = "frontend.png",
                            Name = "Frontend"
                        });
                });

            modelBuilder.Entity("Online_learning_platform.Models.Courses", b =>
                {
                    b.Property<int>("CoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursesId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CoursesId = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(2024, 10, 2, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of c# language",
                            Img = "csharp.png",
                            Name = "C#",
                            TrainerId = 1
                        },
                        new
                        {
                            CoursesId = 2,
                            CategoryId = 1,
                            CreationDate = new DateTime(2024, 10, 10, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of Data bases with Sql server",
                            Img = "Sql.jpeg",
                            Name = "Data Base",
                            TrainerId = 1
                        },
                        new
                        {
                            CoursesId = 3,
                            CategoryId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of how to query data using linq library",
                            Img = "Linq.jpeg",
                            Name = "Linq",
                            TrainerId = 1
                        },
                        new
                        {
                            CoursesId = 4,
                            CategoryId = 1,
                            CreationDate = new DateTime(2024, 10, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of how to conect with database from vs and building database with c#",
                            Img = "EF.jpeg",
                            Name = "EF core",
                            TrainerId = 1
                        },
                        new
                        {
                            CoursesId = 5,
                            CategoryId = 2,
                            CreationDate = new DateTime(2024, 10, 13, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of how to build the skeleton of the page ",
                            Img = "Html.jpeg",
                            Name = "HTML",
                            TrainerId = 3
                        },
                        new
                        {
                            CoursesId = 6,
                            CategoryId = 2,
                            CreationDate = new DateTime(2024, 10, 16, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of how to style page elements",
                            Img = "Css.jpeg",
                            Name = "CSS",
                            TrainerId = 3
                        },
                        new
                        {
                            CoursesId = 7,
                            CategoryId = 2,
                            CreationDate = new DateTime(2024, 10, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this course you will learn all concepts of how to make the page dynamic ",
                            Img = "Js.png",
                            Name = "JS",
                            TrainerId = 3
                        });
                });

            modelBuilder.Entity("Online_learning_platform.Models.Lesson", b =>
                {
                    b.Property<int>("Lesson_Id")
                        .HasColumnType("int");

                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lesson_Id", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("lesson");

                    b.HasData(
                        new
                        {
                            Lesson_Id = 1,
                            CoursesId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "introduction to c#",
                            Title = "introduction",
                            Video = "https://youtu.be/DZHohhJDjHk?si=ntxasWbbdiUK8vwu"
                        },
                        new
                        {
                            Lesson_Id = 2,
                            CoursesId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn the basic syntax of lthe language ",
                            Title = "Language Syntax",
                            Video = "https://youtu.be/ArvFgo9wM3M?si=CuVFmK8AZJssrLer"
                        },
                        new
                        {
                            Lesson_Id = 3,
                            CoursesId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "we will learn how to write to console and display it",
                            Title = "Writen to console",
                            Video = "https://youtu.be/xP1vT4Qpw1w?si=0S-5WCbTDDhZALhl"
                        },
                        new
                        {
                            Lesson_Id = 4,
                            CoursesId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "in this lesson you will learn the kind of variables , his scopes and how to use it ",
                            Title = "variables",
                            Video = "https://youtu.be/Mc74_yTAK3Y?si=7b8GuFSXXaVfe4sA"
                        },
                        new
                        {
                            Lesson_Id = 5,
                            CoursesId = 1,
                            CreationDate = new DateTime(2024, 10, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "you will learn the kinds of data types and the using of it ",
                            Title = "Data Types",
                            Video = "https://youtu.be/TchQzL53Fs0?si=cPNVtPtShT9WxK5S"
                        });
                });

            modelBuilder.Entity("Online_learning_platform.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "I am a Backend Developer in xqt company and work as instructor",
                            Email = "mohamed23@gmail.com",
                            Img = "images (1).jpeg",
                            Name = "Mohamed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "I am a Frontend Developer in solution  company and work as instructor",
                            Email = "ahmed78@gmail.com",
                            Img = "ahmedemp.jpg",
                            Name = "Ahmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "I am a Ui&Ux Developer in soft company and work as instructor",
                            Email = "camelia90@gmail.com",
                            Img = "empimg.jpeg",
                            Name = "Camelia"
                        });
                });

            modelBuilder.Entity("Online_learning_platform.Models.UserCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CoursesId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Online_learning_platform.Models.Courses", b =>
                {
                    b.HasOne("Online_learning_platform.Models.Categories", "Categories")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Online_learning_platform.Models.Trainer", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Online_learning_platform.Models.Lesson", b =>
                {
                    b.HasOne("Online_learning_platform.Models.Courses", "Courses")
                        .WithMany("Lessons")
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.UserCourses", b =>
                {
                    b.HasOne("Online_learning_platform.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserCourses")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Online_learning_platform.Models.Courses", "Courses")
                        .WithMany("userCourses")
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.Categories", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.Courses", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("userCourses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.Trainer", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Online_learning_platform.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
